// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.scrumtool.web;

import com.scrumtool.domain.Actual;
import com.scrumtool.domain.Budget;
import com.scrumtool.domain.DevelopmentTask;
import com.scrumtool.domain.Estimate;
import com.scrumtool.domain.Issue;
import com.scrumtool.domain.Module;
import com.scrumtool.domain.Remaining;
import com.scrumtool.domain.Sprint;
import com.scrumtool.domain.Team;
import com.scrumtool.domain.User;
import com.scrumtool.domain.reference.DevelopmentTaskType;
import com.scrumtool.domain.reference.TaskStatus;
import java.io.UnsupportedEncodingException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.String;
import java.util.Arrays;
import java.util.Collection;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect DevelopmentTaskController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST)
    public String DevelopmentTaskController.create(@Valid DevelopmentTask developmentTask, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("developmentTask", developmentTask);
            return "developmenttasks/create";
        }
        uiModel.asMap().clear();
        developmentTask.persist();
        return "redirect:/developmenttasks/" + encodeUrlPathSegment(developmentTask.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String DevelopmentTaskController.createForm(Model uiModel) {
        uiModel.addAttribute("developmentTask", new DevelopmentTask());
        return "developmenttasks/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String DevelopmentTaskController.show(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("developmenttask", DevelopmentTask.findDevelopmentTask(id));
        uiModel.addAttribute("itemId", id);
        return "developmenttasks/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String DevelopmentTaskController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            uiModel.addAttribute("developmenttasks", DevelopmentTask.findDevelopmentTaskEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) DevelopmentTask.countDevelopmentTasks() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("developmenttasks", DevelopmentTask.findAllDevelopmentTasks());
        }
        return "developmenttasks/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String DevelopmentTaskController.update(@Valid DevelopmentTask developmentTask, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("developmentTask", developmentTask);
            return "developmenttasks/update";
        }
        uiModel.asMap().clear();
        developmentTask.merge();
        return "redirect:/developmenttasks/" + encodeUrlPathSegment(developmentTask.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String DevelopmentTaskController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("developmentTask", DevelopmentTask.findDevelopmentTask(id));
        return "developmenttasks/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String DevelopmentTaskController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        DevelopmentTask.findDevelopmentTask(id).remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/developmenttasks";
    }
    
    @ModelAttribute("actuals")
    public Collection<Actual> DevelopmentTaskController.populateActuals() {
        return Actual.findAllActuals();
    }
    
    @ModelAttribute("budgets")
    public Collection<Budget> DevelopmentTaskController.populateBudgets() {
        return Budget.findAllBudgets();
    }
    
    @ModelAttribute("developmenttasks")
    public Collection<DevelopmentTask> DevelopmentTaskController.populateDevelopmentTasks() {
        return DevelopmentTask.findAllDevelopmentTasks();
    }
    
    @ModelAttribute("estimates")
    public Collection<Estimate> DevelopmentTaskController.populateEstimates() {
        return Estimate.findAllEstimates();
    }
    
    @ModelAttribute("issues")
    public Collection<Issue> DevelopmentTaskController.populateIssues() {
        return Issue.findAllIssues();
    }
    
    @ModelAttribute("modules")
    public Collection<Module> DevelopmentTaskController.populateModules() {
        return Module.findAllModules();
    }
    
    @ModelAttribute("remainings")
    public Collection<Remaining> DevelopmentTaskController.populateRemainings() {
        return Remaining.findAllRemainings();
    }
    
    @ModelAttribute("sprints")
    public Collection<Sprint> DevelopmentTaskController.populateSprints() {
        return Sprint.findAllSprints();
    }
    
    @ModelAttribute("teams")
    public Collection<Team> DevelopmentTaskController.populateTeams() {
        return Team.findAllTeams();
    }
    
    @ModelAttribute("users")
    public Collection<User> DevelopmentTaskController.populateUsers() {
        return User.findAllUsers();
    }
    
    @ModelAttribute("developmenttasktypes")
    public Collection<DevelopmentTaskType> DevelopmentTaskController.populateDevelopmentTaskTypes() {
        return Arrays.asList(DevelopmentTaskType.class.getEnumConstants());
    }
    
    @ModelAttribute("taskstatuses")
    public Collection<TaskStatus> DevelopmentTaskController.populateTaskStatuses() {
        return Arrays.asList(TaskStatus.class.getEnumConstants());
    }
    
    String DevelopmentTaskController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
