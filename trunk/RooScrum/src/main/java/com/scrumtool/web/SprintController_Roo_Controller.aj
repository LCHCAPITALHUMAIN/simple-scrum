// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.scrumtool.web;

import com.scrumtool.domain.DevelopmentTask;
import com.scrumtool.domain.ManagementTask;
import com.scrumtool.domain.Release;
import com.scrumtool.domain.Sprint;
import com.scrumtool.domain.SprintDay;
import com.scrumtool.domain.Team;
import com.scrumtool.domain.User;
import java.lang.Integer;
import java.lang.Long;
import java.lang.String;
import java.util.Collection;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

privileged aspect SprintController_Roo_Controller {
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String SprintController.createForm(Model uiModel) {
        uiModel.addAttribute("sprint", new Sprint());
        addDateTimeFormatPatterns(uiModel);
        return "sprints/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String SprintController.show(@PathVariable("id") Long id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("sprint", Sprint.findSprint(id));
        uiModel.addAttribute("itemId", id);
        return "sprints/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String SprintController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            uiModel.addAttribute("sprints", Sprint.findSprintEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) Sprint.countSprints() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("sprints", Sprint.findAllSprints());
        }
        addDateTimeFormatPatterns(uiModel);
        return "sprints/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String SprintController.update(@Valid Sprint sprint, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("sprint", sprint);
            addDateTimeFormatPatterns(uiModel);
            return "sprints/update";
        }
        uiModel.asMap().clear();
        sprint.merge();
        return "redirect:/sprints/" + encodeUrlPathSegment(sprint.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String SprintController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("sprint", Sprint.findSprint(id));
        addDateTimeFormatPatterns(uiModel);
        return "sprints/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String SprintController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Sprint.findSprint(id).remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/sprints";
    }
    
    @ModelAttribute("developmenttasks")
    public Collection<DevelopmentTask> SprintController.populateDevelopmentTasks() {
        return DevelopmentTask.findAllDevelopmentTasks();
    }
    
    @ModelAttribute("managementtasks")
    public Collection<ManagementTask> SprintController.populateManagementTasks() {
        return ManagementTask.findAllManagementTasks();
    }
    
    @ModelAttribute("releases")
    public Collection<Release> SprintController.populateReleases() {
        return Release.findAllReleases();
    }
    
    @ModelAttribute("sprints")
    public Collection<Sprint> SprintController.populateSprints() {
        return Sprint.findAllSprints();
    }
    
    @ModelAttribute("sprintdays")
    public Collection<SprintDay> SprintController.populateSprintDays() {
        return SprintDay.findAllSprintDays();
    }
    
    @ModelAttribute("teams")
    public Collection<Team> SprintController.populateTeams() {
        return Team.findAllTeams();
    }
    
    @ModelAttribute("users")
    public Collection<User> SprintController.populateUsers() {
        return User.findAllUsers();
    }
    
}
